---
import Layout from '../layouts/Layout.astro';

// Debug: Log if user is already authenticated
const userCookie = Astro.cookies.get('user');
console.log('Existing user cookie:', userCookie?.value);

// If user is already logged in, redirect to admin
if (userCookie?.value) {
  const user = JSON.parse(userCookie.value);
  console.log('User already logged in:', user);
  if (user.role === 'admin') {
    return Astro.redirect('/admin');
  }
}
---

<Layout title="Login">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Sign in to your account
        </h2>
      </div>
      
      <form id="login-form" class="mt-8 space-y-6">
        <div class="rounded-md shadow-sm -space-y-px">
          <div>
            <label for="email" class="sr-only">Email address</label>
            <input
              id="email"
              name="email"
              type="email"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm"
              placeholder="Email address"
            />
          </div>
          <div>
            <label for="password" class="sr-only">Password</label>
            <input
              id="password"
              name="password"
              type="password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm"
              placeholder="Password"
            />
          </div>
        </div>

        <div id="error-message" class="hidden text-red-600 text-sm text-center"></div>

        <div>
          <button
            type="submit"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            Sign in
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';

  const form = document.getElementById('login-form') as HTMLFormElement;
  const errorMessage = document.getElementById('error-message');

  function showError(message: string) {
    if (errorMessage) {
      errorMessage.textContent = message;
      errorMessage.classList.remove('hidden');
    }
  }

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const email = formData.get('email')?.toString();
    const password = formData.get('password')?.toString();

    if (!email || !password) {
      showError('Please fill in all fields');
      return;
    }

    try {
      if (!import.meta.env.PUBLIC_SUPABASE_URL || !import.meta.env.PUBLIC_SUPABASE_ANON_KEY) {
        throw new Error('Missing Supabase environment variables');
      }

      const supabase = createClient(
        import.meta.env.PUBLIC_SUPABASE_URL,
        import.meta.env.PUBLIC_SUPABASE_ANON_KEY
      );

      // Sign in with email and password
      const { data: { session }, error: signInError } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (signInError) {
        throw signInError;
      }

      if (!session?.user) {
        throw new Error('Authentication failed');
      }

      // Get user metadata to check role
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (userError || !user) {
        throw userError || new Error('Failed to get user data');
      }

      // Check if user has admin role in metadata
      const isAdmin = user.user_metadata?.role === 'admin';
      if (!isAdmin) {
        throw new Error('Access denied: User is not an admin');
      }

      const userData = {
        id: user.id,
        email: user.email,
        role: 'admin',
        session: session.access_token
      };

      // Store user session in cookies with proper attributes
      document.cookie = `user=${JSON.stringify(userData)}; path=/; max-age=86400; SameSite=Lax`;
      
      // Redirect to admin dashboard
      window.location.href = '/admin';
    } catch (error) {
      console.error('Login error:', error);
      showError('Invalid email or password');
    }
  });
</script>