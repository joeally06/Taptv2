---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/db';

// Get auth cookie
const authCookie = Astro.cookies.get('sb-access-token');
let sessionData = null;
let userData = null;
let error = null;

try {
  if (authCookie?.value) {
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    if (sessionError) throw sessionError;
    sessionData = session;

    if (session) {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError) throw userError;
      userData = user;
    }
  }
} catch (e) {
  error = e instanceof Error ? e.message : 'Unknown error occurred';
}
---

<Layout title="Auth Debug">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-8">Authentication Debug</h1>

    <div class="space-y-8">
      <!-- Auth Cookie Status -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-lg font-semibold mb-4">Auth Cookie Status</h2>
        <pre class="bg-gray-100 p-4 rounded overflow-auto">
          {JSON.stringify({ exists: !!authCookie?.value }, null, 2)}
        </pre>
      </div>

      <!-- Session Data -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-lg font-semibold mb-4">Session Data</h2>
        <pre class="bg-gray-100 p-4 rounded overflow-auto">
          {JSON.stringify(sessionData, null, 2)}
        </pre>
      </div>

      <!-- User Data -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-lg font-semibold mb-4">User Data</h2>
        <pre class="bg-gray-100 p-4 rounded overflow-auto">
          {JSON.stringify(userData, null, 2)}
        </pre>
      </div>

      <!-- Error Display -->
      {error && (
        <div class="bg-red-50 border-l-4 border-red-400 p-4">
          <h2 class="text-lg font-semibold text-red-700 mb-2">Error</h2>
          <p class="text-red-600">{error}</p>
        </div>
      )}

      <!-- Test Actions -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-lg font-semibold mb-4">Test Actions</h2>
        <div class="space-y-4">
          <button
            id="test-connection"
            class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Test Connection
          </button>
          <button
            id="test-auth"
            class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 ml-4"
          >
            Test Auth
          </button>
          <button
            id="clear-auth"
            class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 ml-4"
          >
            Clear Auth
          </button>
        </div>
        <div id="test-results" class="mt-4 p-4 bg-gray-100 rounded hidden">
          <pre class="whitespace-pre-wrap"></pre>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  const testConnectionBtn = document.getElementById('test-connection');
  const testAuthBtn = document.getElementById('test-auth');
  const clearAuthBtn = document.getElementById('clear-auth');
  const resultsDiv = document.getElementById('test-results');
  const resultsPre = resultsDiv?.querySelector('pre');

  function showResults(data: any) {
    if (resultsDiv && resultsPre) {
      resultsPre.textContent = JSON.stringify(data, null, 2);
      resultsDiv.classList.remove('hidden');
    }
  }

  testConnectionBtn?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/test-connection');
      const data = await response.json();
      showResults(data);
    } catch (error) {
      showResults({ error: error instanceof Error ? error.message : 'Test failed' });
    }
  });

  testAuthBtn?.addEventListener('click', async () => {
    try {
      const response = await fetch('/api/test-auth');
      const data = await response.json();
      showResults(data);
    } catch (error) {
      showResults({ error: error instanceof Error ? error.message : 'Auth test failed' });
    }
  });

  clearAuthBtn?.addEventListener('click', () => {
    document.cookie = 'sb-access-token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    location.reload();
  });
</script>