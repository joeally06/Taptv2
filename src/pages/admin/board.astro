---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { getBoardMembers } from '../../lib/db';

// Verify admin access
const userCookie = Astro.cookies.get('user');
let user = null;
try {
  user = userCookie ? JSON.parse(userCookie.value) : null;
} catch (error) {
  console.error('Error parsing user cookie:', error);
}

if (!user || user.role !== 'admin') {
  return Astro.redirect('/login');
}

// Fetch board members
const boardMembers = await getBoardMembers();
---

<Layout title="Manage Board Members">
  <AdminNav currentPath="/admin/board" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Board Members</h1>
      <button
        id="add-member"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Add Board Member
      </button>
    </div>

    <div class="bg-white rounded-lg shadow overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Organization</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {boardMembers.map(member => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  {member.image_url && (
                    <img src={member.image_url} alt={member.name} class="h-10 w-10 rounded-full mr-3" />
                  )}
                  <div class="text-sm font-medium text-gray-900">{member.name}</div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{member.title}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{member.organization}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button
                  class="text-primary-600 hover:text-primary-900 mr-3"
                  data-action="edit"
                  data-member={JSON.stringify(member)}
                >
                  Edit
                </button>
                <button
                  class="text-red-600 hover:text-red-900"
                  data-action="delete"
                  data-member-id={member.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Member Modal -->
  <div id="member-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-8 max-w-2xl w-full">
      <h2 id="modal-title" class="text-xl font-bold mb-4">Add Board Member</h2>
      
      <form id="member-form" class="space-y-4">
        <input type="hidden" name="id" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
            <input
              type="text"
              name="name"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Title</label>
            <input
              type="text"
              name="title"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <input
              type="text"
              name="role"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Organization</label>
            <input
              type="text"
              name="organization"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
          <input
            type="text"
            name="location"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
          <input
            type="url"
            name="image_url"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Website</label>
          <input
            type="url"
            name="website"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <textarea
            name="notes"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          ></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Term</label>
          <input
            type="text"
            name="term"
            placeholder="e.g., 2023-2025"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div class="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            id="cancel-modal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createBoardMember, updateBoardMember, deleteBoardMember } from '../../lib/db';

  const modal = document.getElementById('member-modal');
  const form = document.getElementById('member-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addMemberBtn = document.getElementById('add-member');
  const cancelBtn = document.getElementById('cancel-modal');

  function showModal(title: string) {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addMemberBtn?.addEventListener('click', () => {
    showModal('Add Board Member');
  });

  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const memberId = data.id?.toString();

    try {
      if (memberId) {
        await updateBoardMember(memberId, data);
      } else {
        await createBoardMember(data);
      }

      hideModal();
      window.location.reload();
    } catch (error) {
      console.error('Error saving board member:', error);
      alert('Failed to save board member. Please try again.');
    }
  });

  // Handle edit button clicks
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', () => {
      const memberData = JSON.parse((button as HTMLElement).dataset.member || '{}');
      
      if (form) {
        Object.entries(memberData).forEach(([key, value]) => {
          const input = form.querySelector(`[name="${key}"]`) as HTMLInputElement;
          if (input) {
            input.value = value as string;
          }
        });

        showModal('Edit Board Member');
      }
    });
  });

  // Handle delete button clicks
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async () => {
      const memberId = (button as HTMLElement).dataset.memberId;
      if (!memberId) return;

      if (confirm('Are you sure you want to delete this board member?')) {
        try {
          await deleteBoardMember(memberId);
          window.location.reload();
        } catch (error) {
          console.error('Error deleting board member:', error);
          alert('Failed to delete board member. Please try again.');
        }
      }
    });
  });
</script>