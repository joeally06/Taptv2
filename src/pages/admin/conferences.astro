---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { getLatestConference } from '../../lib/db';

// Verify admin access
const userCookie = Astro.cookies.get('user');
let user = null;
try {
  user = userCookie ? JSON.parse(userCookie.value) : null;
} catch (error) {
  console.error('Error parsing user cookie:', error);
}

if (!user || user.role !== 'admin') {
  return Astro.redirect('/login');
}

// Fetch conferences
const conference = await getLatestConference();
---

<Layout title="Manage Conferences">
  <AdminNav currentPath="/admin/conferences" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Conference Management</h1>
      <button
        id="add-conference"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Create New Conference
      </button>
    </div>

    <div class="grid grid-cols-1 gap-6">
      {conference ? (
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex justify-between items-start mb-4">
            <div>
              <h2 class="text-xl font-semibold text-primary-700">{conference.name}</h2>
              <p class="text-gray-600">
                {new Date(conference.start_date).toLocaleDateString()} - {new Date(conference.end_date).toLocaleDateString()}
              </p>
            </div>
            <div class="space-x-2">
              <button
                class="text-primary-600 hover:text-primary-900"
                data-action="edit"
                data-conference={JSON.stringify(conference)}
              >
                Edit
              </button>
            </div>
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <p class="text-sm text-gray-500">Location</p>
              <p class="text-gray-700">{conference.location}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Price</p>
              <p class="text-gray-700">${conference.price}</p>
            </div>
            <div>
              <p class="text-sm text-gray-500">Maximum Attendees</p>
              <p class="text-gray-700">{conference.max_attendees || 'Unlimited'}</p>
            </div>
          </div>

          <div>
            <p class="text-sm text-gray-500 mb-2">Description</p>
            <p class="text-gray-700">{conference.description}</p>
          </div>
        </div>
      ) : (
        <div class="bg-white rounded-lg shadow-md p-6 text-center">
          <p class="text-gray-600">No conference is currently scheduled.</p>
          <p class="text-sm text-gray-500 mt-2">Click "Create New Conference" to set up the next conference.</p>
        </div>
      )}
    </div>
  </div>

  <!-- Conference Modal -->
  <div id="conference-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-8 max-w-2xl w-full">
      <h2 id="modal-title" class="text-xl font-bold mb-4">Create New Conference</h2>
      
      <form id="conference-form" class="space-y-4">
        <input type="hidden" name="id" />
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Conference Name *</label>
          <input
            type="text"
            name="name"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Start Date *</label>
            <input
              type="date"
              name="start_date"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">End Date *</label>
            <input
              type="date"
              name="end_date"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Location *</label>
          <input
            type="text"
            name="location"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Price *</label>
            <input
              type="number"
              name="price"
              required
              min="0"
              step="0.01"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Maximum Attendees</label>
            <input
              type="number"
              name="max_attendees"
              min="1"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
          <textarea
            name="description"
            rows="4"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          ></textarea>
        </div>

        <div class="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            id="cancel-modal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  import { createConference, updateConference } from '../../lib/db';

  const modal = document.getElementById('conference-modal');
  const form = document.getElementById('conference-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addConferenceBtn = document.getElementById('add-conference');
  const cancelBtn = document.getElementById('cancel-modal');

  function showModal(title: string) {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addConferenceBtn?.addEventListener('click', () => {
    showModal('Create New Conference');
  });

  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const conferenceId = data.id?.toString();

    // Format dates
    if (data.start_date) {
      data.start_date = new Date(data.start_date.toString()).toISOString();
    }
    if (data.end_date) {
      data.end_date = new Date(data.end_date.toString()).toISOString();
    }

    try {
      if (conferenceId) {
        await updateConference(conferenceId, data);
      } else {
        await createConference(data);
      }

      hideModal();
      window.location.reload();
    } catch (error) {
      console.error('Error saving conference:', error);
      alert('Failed to save conference. Please try again.');
    }
  });

  // Handle edit button clicks
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', () => {
      const conferenceData = JSON.parse((button as HTMLElement).dataset.conference || '{}');
      
      if (form) {
        // Format dates for input fields
        const startDate = new Date(conferenceData.start_date);
        const endDate = new Date(conferenceData.end_date);
        
        Object.entries(conferenceData).forEach(([key, value]) => {
          const input = form.querySelector(`[name="${key}"]`) as HTMLInputElement;
          if (input) {
            if (key === 'start_date') {
              input.value = startDate.toISOString().split('T')[0];
            } else if (key === 'end_date') {
              input.value = endDate.toISOString().split('T')[0];
            } else {
              input.value = value as string;
            }
          }
        });

        showModal('Edit Conference');
      }
    });
  });
</script>