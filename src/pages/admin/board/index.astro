---
import Layout from '../../../layouts/Layout.astro';
import AdminNav from '../../../components/AdminNav.astro';
import { supabase } from '../../../lib/db';

// Check if user is authenticated and is admin
const user = Astro.cookies.get('user')?.json();

if (!user || user.role !== 'admin') {
  return Astro.redirect('/login');
}

// Fetch board members
const { data: boardMembers, error } = await supabase
  .from('board_members')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching board members:', error);
}
---

<Layout title="Manage Board Members">
  <AdminNav currentPath="/admin/board" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Board Members Management</h1>
      <button
        id="add-member"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Add Board Member
      </button>
    </div>

    <div class="bg-white rounded-lg shadow overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Organization</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Term</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {boardMembers?.map(member => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{member.name}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{member.title}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{member.organization}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{member.term}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <button
                  class="text-primary-600 hover:text-primary-900 mr-3"
                  data-action="edit"
                  data-member={JSON.stringify(member)}
                >
                  Edit
                </button>
                <button
                  class="text-red-600 hover:text-red-900"
                  data-action="delete"
                  data-member-id={member.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Add/Edit Member Modal -->
  <div id="member-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-8 max-w-2xl w-full">
      <h2 id="modal-title" class="text-xl font-bold mb-4">Add Board Member</h2>
      
      <form id="member-form" class="space-y-4">
        <input type="hidden" name="id" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
            <input
              type="text"
              name="name"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Title *</label>
            <input
              type="text"
              name="title"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Role</label>
            <input
              type="text"
              name="role"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Organization</label>
            <input
              type="text"
              name="organization"
              class="w-full px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
          <input
            type="text"
            name="location"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Contact Information</label>
          <div class="space-y-2">
            <div>
              <input
                type="tel"
                name="office"
                placeholder="Office Phone"
                class="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <input
                type="tel"
                name="cell"
                placeholder="Cell Phone"
                class="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
            <div>
              <input
                type="email"
                name="email"
                placeholder="Email"
                class="w-full px-3 py-2 border border-gray-300 rounded-md"
              />
            </div>
          </div>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
          <input
            type="url"
            name="image_url"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Website</label>
          <input
            type="url"
            name="website"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
          <textarea
            name="notes"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          ></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Term</label>
          <input
            type="text"
            name="term"
            placeholder="e.g., 2023-2025"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div class="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            id="cancel-modal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  const modal = document.getElementById('member-modal');
  const form = document.getElementById('member-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addMemberBtn = document.getElementById('add-member');
  const cancelBtn = document.getElementById('cancel-modal');

  function showModal(title: string) {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addMemberBtn?.addEventListener('click', () => {
    showModal('Add Board Member');
  });

  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const memberId = formData.get('id')?.toString();

    // Prepare contact info
    const contactInfo = {
      office: formData.get('office'),
      cell: formData.get('cell'),
      email: formData.get('email')
    };

    // Prepare member data
    const memberData = {
      name: formData.get('name'),
      title: formData.get('title'),
      role: formData.get('role'),
      organization: formData.get('organization'),
      location: formData.get('location'),
      contact_info: contactInfo,
      image_url: formData.get('image_url'),
      website: formData.get('website'),
      notes: formData.get('notes'),
      term: formData.get('term')
    };

    try {
      const { supabase } = await import('../../../lib/db');
      
      if (memberId) {
        // Update existing member
        const { error } = await supabase
          .from('board_members')
          .update(memberData)
          .eq('id', memberId);

        if (error) throw error;
      } else {
        // Create new member
        const { error } = await supabase
          .from('board_members')
          .insert([memberData]);

        if (error) throw error;
      }

      hideModal();
      window.location.reload();
    } catch (error) {
      console.error('Error saving board member:', error);
      alert('Failed to save board member. Please try again.');
    }
  });

  // Handle edit button clicks
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', () => {
      const memberData = JSON.parse((button as HTMLElement).dataset.member || '{}');
      
      if (form) {
        const idInput = form.querySelector('[name="id"]') as HTMLInputElement;
        const nameInput = form.querySelector('[name="name"]') as HTMLInputElement;
        const titleInput = form.querySelector('[name="title"]') as HTMLInputElement;
        const roleInput = form.querySelector('[name="role"]') as HTMLInputElement;
        const organizationInput = form.querySelector('[name="organization"]') as HTMLInputElement;
        const locationInput = form.querySelector('[name="location"]') as HTMLInputElement;
        const imageUrlInput = form.querySelector('[name="image_url"]') as HTMLInputElement;
        const websiteInput = form.querySelector('[name="website"]') as HTMLInputElement;
        const notesInput = form.querySelector('[name="notes"]') as HTMLTextAreaElement;
        const termInput = form.querySelector('[name="term"]') as HTMLInputElement;
        const officeInput = form.querySelector('[name="office"]') as HTMLInputElement;
        const cellInput = form.querySelector('[name="cell"]') as HTMLInputElement;
        const emailInput = form.querySelector('[name="email"]') as HTMLInputElement;

        if (idInput) idInput.value = memberData.id;
        if (nameInput) nameInput.value = memberData.name;
        if (titleInput) titleInput.value = memberData.title;
        if (roleInput) roleInput.value = memberData.role || '';
        if (organizationInput) organizationInput.value = memberData.organization || '';
        if (locationInput) locationInput.value = memberData.location || '';
        if (imageUrlInput) imageUrlInput.value = memberData.image_url || '';
        if (websiteInput) websiteInput.value = memberData.website || '';
        if (notesInput) notesInput.value = memberData.notes || '';
        if (termInput) termInput.value = memberData.term || '';

        // Handle contact info
        const contactInfo = memberData.contact_info || {};
        if (officeInput) officeInput.value = contactInfo.office || '';
        if (cellInput) cellInput.value = contactInfo.cell || '';
        if (emailInput) emailInput.value = contactInfo.email || '';

        showModal('Edit Board Member');
      }
    });
  });

  // Handle delete button clicks
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async () => {
      const memberId = (button as HTMLElement).dataset.memberId;
      if (!memberId) return;

      if (confirm('Are you sure you want to delete this board member?')) {
        try {
          const { supabase } = await import('../../../lib/db');
          const { error } = await supabase
            .from('board_members')
            .delete()
            .eq('id', memberId);

          if (error) throw error;
          window.location.reload();
        } catch (error) {
          console.error('Error deleting board member:', error);
          alert('Failed to delete board member. Please try again.');
        }
      }
    });
  });
</script>