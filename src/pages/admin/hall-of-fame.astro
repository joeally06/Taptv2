---
import Layout from '../../layouts/Layout.astro';
import AdminNav from '../../components/AdminNav.astro';
import { createClient } from '@libsql/client';

const db = createClient({
  url: 'file:conference.db'
});

// Check if user is authenticated and is admin
const user = Astro.cookies.get('user')?.json();

if (!user || user.role !== 'admin') {
  return Astro.redirect('/login');
}

// Get all hall of fame members
const result = await db.execute('SELECT * FROM hall_of_fame_members ORDER BY induction_year DESC, name ASC');
const members = result.rows;
---

<Layout title="Hall of Fame Management">
  <AdminNav currentPath="/admin/hall-of-fame" />
  
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900">Hall of Fame Members</h1>
      <button
        id="add-member"
        class="bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 transition-colors"
      >
        Add Member
      </button>
    </div>
    
    <div class="bg-white rounded-lg shadow overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">District</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Induction Year</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {members.map(member => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{member.name}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{member.district}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{member.induction_year}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <button
                  class="text-primary-600 hover:text-primary-900 mr-3"
                  data-action="edit"
                  data-member={JSON.stringify(member)}
                >
                  Edit
                </button>
                <button
                  class="text-red-600 hover:text-red-900"
                  data-action="delete"
                  data-member-id={member.id}
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Add/Edit Member Modal -->
  <div id="member-modal" class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center">
    <div class="bg-white rounded-lg p-8 max-w-md w-full">
      <h2 id="modal-title" class="text-xl font-bold mb-4">Add Hall of Fame Member</h2>
      
      <form id="member-form" class="space-y-4">
        <input type="hidden" name="memberId" />
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Name</label>
          <input
            type="text"
            name="name"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">District</label>
          <input
            type="text"
            name="district"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Induction Year</label>
          <input
            type="number"
            name="inductionYear"
            required
            min="1900"
            max="2025"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Biography</label>
          <textarea
            name="bio"
            rows="4"
            class="w-full px-3 py-2 border border-gray-300 rounded-md"
          ></textarea>
        </div>
        
        <div class="flex justify-end space-x-3 mt-6">
          <button
            type="button"
            id="cancel-modal"
            class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700"
          >
            Save
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script>
  const modal = document.getElementById('member-modal');
  const form = document.getElementById('member-form') as HTMLFormElement;
  const modalTitle = document.getElementById('modal-title');
  const addMemberBtn = document.getElementById('add-member');
  const cancelBtn = document.getElementById('cancel-modal');

  function showModal(title: string) {
    if (modal && modalTitle) {
      modal.classList.remove('hidden');
      modalTitle.textContent = title;
    }
  }

  function hideModal() {
    if (modal && form) {
      modal.classList.add('hidden');
      form.reset();
    }
  }

  addMemberBtn?.addEventListener('click', () => {
    showModal('Add Hall of Fame Member');
  });

  cancelBtn?.addEventListener('click', hideModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const memberId = formData.get('memberId')?.toString();
    const data = Object.fromEntries(formData);

    try {
      const response = await fetch('/api/hall-of-fame/members', {
        method: memberId ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        throw new Error('Failed to save member');
      }

      hideModal();
      window.location.reload();
    } catch (error) {
      console.error('Error saving member:', error);
      alert('Failed to save member. Please try again.');
    }
  });

  // Handle edit button clicks
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', () => {
      const memberData = JSON.parse((button as HTMLElement).dataset.member || '{}');
      
      if (form) {
        const memberIdInput = form.querySelector('[name="memberId"]') as HTMLInputElement;
        const nameInput = form.querySelector('[name="name"]') as HTMLInputElement;
        const districtInput = form.querySelector('[name="district"]') as HTMLInputElement;
        const yearInput = form.querySelector('[name="inductionYear"]') as HTMLInputElement;
        const bioInput = form.querySelector('[name="bio"]') as HTMLTextAreaElement;

        if (memberIdInput) memberIdInput.value = memberData.id;
        if (nameInput) nameInput.value = memberData.name;
        if (districtInput) districtInput.value = memberData.district;
        if (yearInput) yearInput.value = memberData.induction_year;
        if (bioInput) bioInput.value = memberData.bio || '';

        showModal('Edit Hall of Fame Member');
      }
    });
  });

  // Handle delete button clicks
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async () => {
      const memberId = (button as HTMLElement).dataset.memberId;
      if (!memberId) return;

      if (confirm('Are you sure you want to delete this member?')) {
        try {
          const response = await fetch(`/api/hall-of-fame/members/${memberId}`, {
            method: 'DELETE'
          });

          if (!response.ok) {
            throw new Error('Failed to delete member');
          }

          window.location.reload();
        } catch (error) {
          console.error('Error deleting member:', error);
          alert('Failed to delete member. Please try again.');
        }
      }
    });
  });
</script>